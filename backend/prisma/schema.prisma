// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  session   String
  token     String

  account   Account  @relation(fields: [accountId], references: [id])
  accountId String
}

model Account {
  id        String   @id @default(cuid())

  userId    String @unique
  name      String  @db.VarChar(255)  
  balance   Float
  currency  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions  Session[]
  user      User     @relation(fields: [userId], references: [id])
}

model User {
  id       String   @id @default(cuid())

  email    String   @unique
  name     String   @db.VarChar(255)
  password String   @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  projects Project[]
}

model Project {
  id          String     @id @default(cuid())

  name        String
  description String
  status      StatusProject
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  front       TechnologyFront?
  back        TechnologyBack?
  type        Type

  dependances Dependances[]
  deployments Deployment[]
  logs        Log[]
  configurations Configuration[]

  user        User       @relation(fields: [userId], references: [id])
  userId      String
  }

  enum StatusProject {
  PENDING
  IN_PROGRESS
  CREATED
  FAILED
}

enum Type {
  WEB
  MOBILE
  DESKTOP
  SERVER
}

enum TechnologyFront {
  NEXTJS
  REACT
  VUE
  ELECTRON
  FLUTTER
}

enum TechnologyBack {
  NODEJS
  TYPESCRIPT
  SYMFONY
}

model Configuration {
  id        String   @id @default(cuid())
  key       String
  value     String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Dependances {
  id        String   @id @default(cuid())

  name      String
  version   String
  type      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

model Deployment {
  id        String   @id @default(cuid())

  name      String
  url       String
  status    StatusDeployment

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

enum StatusDeployment {
  PENDING
  IN_PROGRESS
  DEPLOYED
  FAILED
}

model Log {
  id        String   @id @default(cuid())
  message   String
  level     LogLevel
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

